import numpy as np
from typing import List, Tuple, cast
from app.vrp import Node, VRPTW_MultipleDeliveries
import copy
from apscheduler.schedulers.background import BackgroundScheduler
import atexit
from app.models import Clinic, RigiRoute
from app.routes import time_to_number


distances_50x50 = [
    [0.0, 2.96, 2.05, 2.99, 2.77, 2.05, 1.11, 1.39, 1.44, 2.04, 2.23, 1.49, 0.83, 2.65, 2.31, 0.68, 2.92, 2.33, 1.17, 1.84, 1.42, 2.51, 1.44, 1.9, 2.48, 2.82, 2.44, 1.67, 2.16, 0.94, 2.65, 2.63, 2.82, 1.21, 0.56, 1.54, 1.83, 2.46, 0.91, 0.66, 2.98, 1.01, 2.69, 1.28, 2.37, 0.91, 1.49, 1.25, 0.55, 2.19],
    [2.96, 0.0, 1.09, 2.35, 1.49, 2.08, 1.49, 1.16, 1.51, 2.01, 1.15, 2.66, 2.29, 1.43, 1.87, 2.88, 1.68, 0.77, 1.07, 2.11, 2.95, 1.7, 0.65, 1.8, 0.88, 0.96, 1.2, 0.99, 1.49, 1.09, 1.58, 1.53, 1.29, 1.02, 2.06, 2.97, 1.25, 1.56, 2.77, 2.99, 2.73, 2.45, 2.03, 0.55, 1.94, 1.03, 0.59, 0.54, 1.91, 0.86],
    [2.05, 1.09, 0.0, 2.76, 1.96, 1.19, 1.85, 2.62, 1.0, 2.95, 2.82, 2.39, 0.71, 0.7, 1.02, 1.3, 0.86, 0.72, 2.59, 2.61, 2.43, 2.26, 2.91, 0.97, 2.42, 1.35, 2.5, 2.99, 2.39, 2.76, 2.76, 2.25, 2.51, 1.0, 1.57, 1.84, 0.6, 0.91, 1.81, 2.91, 1.91, 2.33, 1.39, 2.55, 0.57, 2.22, 0.95, 2.96, 2.28, 1.17],
    [2.99, 2.35, 2.76, 0.0, 2.41, 2.11, 2.05, 0.59, 1.86, 0.74, 1.74, 1.04, 2.6, 1.01, 2.87, 2.95, 0.57, 0.86, 1.58, 2.6, 1.85, 2.13, 2.75, 0.71, 1.74, 1.5, 2.61, 1.79, 2.27, 2.58, 2.37, 0.92, 1.99, 2.27, 1.43, 2.21, 0.66, 1.29, 2.82, 1.28, 0.78, 0.79, 0.83, 1.98, 2.52, 2.44, 2.92, 0.82, 2.89, 0.87],
    [2.77, 1.49, 1.96, 2.41, 0.0, 2.79, 1.3, 1.06, 2.04, 1.21, 2.35, 2.13, 2.03, 1.12, 1.22, 1.74, 0.72, 1.38, 0.99, 1.51, 2.5, 2.66, 1.3, 2.25, 1.19, 2.32, 1.21, 1.48, 1.63, 2.63, 2.22, 2.98, 2.94, 1.17, 2.85, 2.83, 1.2, 1.16, 2.73, 1.08, 0.9, 1.96, 2.41, 0.87, 0.78, 1.44, 0.94, 1.43, 2.31, 2.09],
    [2.05, 2.08, 1.19, 2.11, 2.79, 0.0, 2.0, 2.92, 0.55, 2.0, 0.73, 1.12, 0.69, 1.95, 1.96, 1.65, 1.86, 2.66, 1.35, 2.83, 2.38, 2.04, 1.32, 2.91, 2.24, 1.51, 1.5, 1.36, 2.92, 1.04, 2.88, 1.89, 2.65, 1.22, 2.42, 1.63, 2.84, 0.77, 2.16, 0.75, 1.69, 2.08, 2.82, 1.32, 1.99, 2.23, 2.51, 1.72, 1.83, 1.81],
    [1.11, 1.49, 1.85, 2.05, 1.3, 2.0, 0.0, 0.58, 1.47, 1.69, 1.75, 1.65, 1.94, 0.88, 1.24, 2.81, 2.31, 1.73, 1.32, 1.27, 1.9, 1.04, 2.25, 0.86, 2.69, 2.44, 2.8, 1.08, 1.03, 0.55, 2.48, 0.51, 2.12, 0.89, 2.3, 2.5, 2.95, 0.72, 1.44, 2.28, 1.83, 2.04, 2.95, 2.92, 1.51, 2.0, 0.92, 2.25, 0.95, 1.22],
    [1.39, 1.16, 2.62, 0.59, 1.06, 2.92, 0.58, 0.0, 0.63, 2.61, 1.0, 1.31, 2.52, 2.72, 2.65, 1.62, 2.63, 2.1, 2.25, 1.04, 2.03, 0.64, 1.17, 1.79, 1.87, 1.19, 2.9, 2.16, 2.2, 0.84, 0.87, 1.32, 2.81, 1.51, 2.62, 2.91, 2.92, 1.64, 0.92, 2.43, 2.78, 0.72, 2.1, 2.11, 2.38, 2.87, 1.58, 2.85, 0.7, 0.88],
    [1.44, 1.51, 1.0, 1.86, 2.04, 0.55, 1.47, 0.63, 0.0, 0.55, 2.01, 2.1, 2.56, 1.47, 2.59, 1.15, 0.95, 2.87, 1.01, 0.98, 0.87, 2.18, 0.76, 2.94, 2.63, 1.57, 2.62, 0.77, 0.93, 2.58, 0.96, 2.15, 2.29, 2.79, 2.23, 1.84, 1.17, 1.51, 1.41, 1.29, 1.59, 0.88, 2.42, 0.8, 1.62, 1.99, 2.33, 1.3, 1.83, 1.24],
    [2.04, 2.01, 2.95, 0.74, 1.21, 2.0, 1.69, 2.61, 0.55, 0.0, 1.77, 2.5, 0.59, 1.84, 2.07, 0.9, 0.91, 2.85, 0.67, 0.96, 2.91, 2.78, 1.08, 1.22, 1.27, 0.85, 2.67, 1.68, 2.73, 2.21, 2.75, 0.99, 1.11, 1.37, 1.13, 1.19, 2.2, 1.06, 1.41, 0.53, 1.79, 1.16, 2.91, 2.45, 2.55, 0.83, 2.47, 0.81, 2.14, 2.42],
    [2.23, 1.15, 2.82, 1.74, 2.35, 0.73, 1.75, 1.0, 2.01, 1.77, 0.0, 2.37, 1.36, 2.52, 1.19, 1.83, 0.89, 1.53, 2.42, 1.19, 2.09, 1.51, 0.5, 2.69, 1.65, 2.68, 2.61, 2.8, 0.81, 0.54, 2.36, 1.3, 0.78, 1.54, 1.46, 0.95, 0.86, 1.83, 2.95, 1.6, 2.69, 2.06, 1.57, 0.9, 1.06, 2.81, 2.82, 2.73, 1.85, 2.93],
    [1.49, 2.66, 2.39, 1.04, 2.13, 1.12, 1.65, 1.31, 2.1, 2.5, 2.37, 0.0, 1.53, 2.01, 2.3, 1.63, 2.05, 2.8, 0.67, 0.65, 1.8, 1.04, 1.11, 1.88, 2.36, 2.07, 2.65, 1.61, 2.87, 2.54, 2.47, 2.76, 2.19, 1.68, 0.76, 2.9, 0.79, 0.8, 1.07, 0.97, 1.09, 2.37, 1.1, 1.42, 1.33, 2.15, 1.75, 2.2, 1.28, 2.76],
    [0.83, 2.29, 0.71, 2.6, 2.03, 0.69, 1.94, 2.52, 2.56, 0.59, 1.36, 1.53, 0.0, 0.89, 2.94, 1.98, 1.07, 1.55, 2.05, 0.86, 1.76, 1.49, 1.12, 2.18, 2.04, 2.06, 2.43, 1.09, 2.85, 2.37, 0.92, 1.28, 0.71, 1.26, 1.07, 1.64, 1.46, 1.05, 1.67, 1.35, 1.07, 2.46, 0.63, 1.16, 1.8, 2.97, 2.34, 0.59, 1.07, 0.79],
    [2.65, 1.43, 0.7, 1.01, 1.12, 1.95, 0.88, 2.72, 1.47, 1.84, 2.52, 2.01, 0.89, 0.0, 0.63, 2.83, 2.64, 2.5, 0.82, 1.86, 2.52, 2.76, 0.9, 2.22, 2.44, 1.11, 2.28, 0.67, 1.34, 2.92, 0.82, 1.37, 2.29, 2.3, 1.03, 1.84, 1.66, 0.58, 1.52, 2.47, 2.75, 0.98, 0.81, 0.99, 0.67, 2.42, 1.86, 1.18, 2.49, 1.63],
    [2.31, 1.87, 1.02, 2.87, 1.22, 1.96, 1.24, 2.65, 2.59, 2.07, 1.19, 2.3, 2.94, 0.63, 0.0, 1.85, 0.67, 0.55, 2.48, 1.83, 2.25, 2.81, 2.73, 0.62, 2.06, 0.74, 0.81, 1.2, 1.86, 1.91, 1.88, 3.0, 2.95, 1.69, 2.91, 0.69, 0.77, 1.68, 1.49, 2.21, 2.32, 2.59, 2.33, 1.49, 0.72, 1.02, 2.3, 0.56, 2.34, 2.14],
    [0.68, 2.88, 1.3, 2.95, 1.74, 1.65, 2.81, 1.62, 1.15, 0.9, 1.83, 1.63, 1.98, 2.83, 1.85, 0.0, 2.45, 1.72, 3.0, 1.37, 0.67, 2.24, 1.86, 2.63, 2.21, 2.32, 1.54, 0.81, 2.67, 1.47, 1.0, 1.16, 1.2, 1.2, 2.76, 2.48, 1.06, 2.08, 0.65, 2.88, 2.03, 1.69, 2.03, 2.76, 2.2, 2.63, 1.18, 1.81, 1.28, 2.32],
    [2.92, 1.68, 0.86, 0.57, 0.72, 1.86, 2.31, 2.63, 0.95, 0.91, 0.89, 2.05, 1.07, 2.64, 0.67, 2.45, 0.0, 2.04, 1.53, 2.39, 0.99, 0.8, 1.43, 1.73, 2.72, 1.43, 1.28, 1.9, 2.59, 1.75, 1.64, 2.04, 0.85, 1.53, 2.74, 2.56, 1.57, 1.99, 0.69, 1.75, 2.86, 2.37, 0.55, 0.75, 2.51, 1.69, 1.99, 2.74, 2.7, 2.01],
    [2.33, 0.77, 0.72, 0.86, 1.38, 2.66, 1.73, 2.1, 2.87, 2.85, 1.53, 2.8, 1.55, 2.5, 0.55, 1.72, 2.04, 0.0, 2.27, 1.21, 0.83, 0.62, 0.97, 0.65, 2.67, 0.58, 0.89, 1.83, 1.36, 1.21, 2.15, 1.27, 2.89, 2.32, 2.63, 2.97, 2.56, 2.75, 2.65, 1.57, 1.72, 0.85, 1.65, 1.82, 1.99, 0.75, 1.08, 2.03, 1.9, 1.35],
    [1.17, 1.07, 2.59, 1.58, 0.99, 1.35, 1.32, 2.25, 1.01, 0.67, 2.42, 0.67, 2.05, 0.82, 2.48, 3.0, 1.53, 2.27, 0.0, 1.14, 2.15, 0.79, 1.69, 2.88, 2.33, 2.29, 1.61, 1.56, 1.52, 0.81, 1.19, 1.16, 2.1, 1.45, 2.32, 1.57, 0.92, 1.66, 2.56, 0.58, 2.69, 0.53, 1.73, 1.51, 1.28, 2.24, 2.1, 1.35, 2.67, 2.66],
    [1.84, 2.11, 2.61, 2.6, 1.51, 2.83, 1.27, 1.04, 0.98, 0.96, 1.19, 0.65, 0.86, 1.86, 1.83, 1.37, 2.39, 1.21, 1.14, 0.0, 1.91, 2.39, 2.15, 2.31, 2.63, 2.09, 0.52, 1.69, 2.58, 2.93, 2.03, 0.78, 1.7, 2.09, 2.57, 1.37, 0.52, 0.73, 1.71, 2.36, 1.27, 1.41, 1.74, 2.78, 2.88, 1.97, 0.91, 1.18, 2.94, 1.88],
    [1.42, 2.95, 2.43, 1.85, 2.5, 2.38, 1.9, 2.03, 0.87, 2.91, 2.09, 1.8, 1.76, 2.52, 2.25, 0.67, 0.99, 0.83, 2.15, 1.91, 0.0, 1.23, 1.85, 0.72, 1.09, 1.84, 2.81, 1.6, 1.59, 1.29, 2.75, 2.38, 2.49, 0.51, 0.91, 0.67, 1.14, 1.04, 2.77, 0.75, 2.27, 1.82, 2.02, 1.67, 2.39, 0.71, 2.76, 2.28, 2.57, 1.15],
    [2.51, 1.7, 2.26, 2.13, 2.66, 2.04, 1.04, 0.64, 2.18, 2.78, 1.51, 1.04, 1.49, 2.76, 2.81, 2.24, 0.8, 0.62, 0.79, 2.39, 1.23, 0.0, 2.44, 1.3, 2.76, 2.27, 2.74, 1.04, 1.23, 2.33, 2.03, 1.11, 2.71, 1.38, 2.61, 2.35, 1.52, 1.83, 2.51, 2.9, 2.68, 1.9, 2.21, 1.36, 0.82, 2.11, 2.38, 2.22, 2.69, 0.82],
    [1.44, 0.65, 2.91, 2.75, 1.3, 1.32, 2.25, 1.17, 0.76, 1.08, 0.5, 1.11, 1.12, 0.9, 2.73, 1.86, 1.43, 0.97, 1.69, 2.15, 1.85, 2.44, 0.0, 0.72, 0.84, 1.85, 1.19, 2.78, 2.93, 2.33, 1.67, 0.77, 2.6, 1.84, 2.31, 2.39, 2.59, 1.18, 1.22, 1.98, 2.2, 0.53, 2.9, 2.06, 2.61, 2.85, 2.94, 2.84, 1.02, 2.34],
    [1.9, 1.8, 0.97, 0.71, 2.25, 2.91, 0.86, 1.79, 2.94, 1.22, 2.69, 1.88, 2.18, 2.22, 0.62, 2.63, 1.73, 0.65, 2.88, 2.31, 0.72, 1.3, 0.72, 0.0, 1.19, 1.89, 0.87, 1.59, 1.27, 1.32, 2.48, 1.78, 1.64, 0.66, 2.26, 1.46, 2.66, 0.88, 1.86, 0.96, 1.45, 2.38, 3.0, 2.43, 2.26, 0.67, 2.82, 1.27, 0.83, 1.98],
    [2.48, 0.88, 2.42, 1.74, 1.19, 2.24, 2.69, 1.87, 2.63, 1.27, 1.65, 2.36, 2.04, 2.44, 2.06, 2.21, 2.72, 2.67, 2.33, 2.63, 1.09, 2.76, 0.84, 1.19, 0.0, 1.1, 1.72, 0.69, 2.38, 2.6, 1.45, 1.62, 0.73, 0.66, 2.04, 1.5, 2.44, 2.74, 2.45, 2.24, 1.85, 0.57, 2.16, 2.32, 0.76, 1.09, 0.51, 1.9, 1.68, 0.77],
    [2.82, 0.96, 1.35, 1.5, 2.32, 1.51, 2.44, 1.19, 1.57, 0.85, 2.68, 2.07, 2.06, 1.11, 0.74, 2.32, 1.43, 0.58, 2.29, 2.09, 1.84, 2.27, 1.85, 1.89, 1.1, 0.0, 1.67, 1.27, 2.96, 2.5, 1.69, 2.66, 0.52, 2.97, 2.02, 2.34, 2.12, 2.14, 2.2, 2.27, 2.23, 0.95, 1.61, 2.66, 2.21, 1.61, 0.79, 2.0, 1.04, 2.98],
    [2.44, 1.2, 2.5, 2.61, 1.21, 1.5, 2.8, 2.9, 2.62, 2.67, 2.61, 2.65, 2.43, 2.28, 0.81, 1.54, 1.28, 0.89, 1.61, 0.52, 2.81, 2.74, 1.19, 0.87, 1.72, 1.67, 0.0, 0.63, 1.81, 1.27, 1.25, 0.69, 2.18, 1.34, 1.41, 1.6, 2.05, 2.67, 2.22, 2.79, 1.19, 0.72, 2.96, 2.22, 2.66, 1.02, 2.27, 2.72, 0.73, 0.65],
    [1.67, 0.99, 2.99, 1.79, 1.48, 1.36, 1.08, 2.16, 0.77, 1.68, 2.8, 1.61, 1.09, 0.67, 1.2, 0.81, 1.9, 1.83, 1.56, 1.69, 1.6, 1.04, 2.78, 1.59, 0.69, 1.27, 0.63, 0.0, 0.51, 0.67, 0.7, 1.31, 1.0, 1.5, 2.69, 2.72, 2.46, 1.09, 0.75, 1.88, 2.77, 0.93, 2.34, 2.08, 2.61, 1.0, 1.51, 2.75, 2.41, 0.76],
    [2.16, 1.49, 2.39, 2.27, 1.63, 2.92, 1.03, 2.2, 0.93, 2.73, 0.81, 2.87, 2.85, 1.34, 1.86, 2.67, 2.59, 1.36, 1.52, 2.58, 1.59, 1.23, 2.93, 1.27, 2.38, 2.96, 1.81, 0.51, 0.0, 2.92, 1.92, 2.24, 1.5, 2.65, 0.51, 1.35, 1.59, 1.66, 0.62, 1.54, 1.02, 1.66, 2.65, 1.85, 1.88, 2.33, 1.38, 2.52, 1.96, 2.92],
    [0.94, 1.09, 2.76, 2.58, 2.63, 1.04, 0.55, 0.84, 2.58, 2.21, 0.54, 2.54, 2.37, 2.92, 1.91, 1.47, 1.75, 1.21, 0.81, 2.93, 1.29, 2.33, 2.33, 1.32, 2.6, 2.5, 1.27, 0.67, 2.92, 0.0, 2.6, 0.56, 1.21, 1.3, 0.53, 0.95, 0.94, 1.68, 2.42, 2.91, 0.65, 0.64, 1.35, 1.39, 2.23, 0.75, 2.41, 1.39, 2.39, 2.38],
    [2.65, 1.58, 2.76, 2.37, 2.22, 2.88, 2.48, 0.87, 0.96, 2.75, 2.36, 2.47, 0.92, 0.82, 1.88, 1.0, 1.64, 2.15, 1.19, 2.03, 2.75, 2.03, 1.67, 2.48, 1.45, 1.69, 1.25, 0.7, 1.92, 2.6, 0.0, 1.86, 2.46, 2.04, 2.61, 1.58, 1.22, 2.87, 2.81, 1.71, 1.25, 2.99, 2.78, 1.02, 1.06, 2.69, 2.62, 1.48, 0.91, 2.41],
    [2.63, 1.53, 2.25, 0.92, 2.98, 1.89, 0.51, 1.32, 2.15, 0.99, 1.3, 2.76, 1.28, 1.37, 3.0, 1.16, 2.04, 1.27, 1.16, 0.78, 2.38, 1.11, 0.77, 1.78, 1.62, 2.66, 0.69, 1.31, 2.24, 0.56, 1.86, 0.0, 1.39, 0.62, 2.81, 2.44, 1.28, 1.64, 1.78, 1.84, 2.14, 0.57, 2.67, 2.8, 2.98, 1.46, 2.6, 0.61, 1.48, 2.52],
    [2.82, 1.29, 2.51, 1.99, 2.94, 2.65, 2.12, 2.81, 2.29, 1.11, 0.78, 2.19, 0.71, 2.29, 2.95, 1.2, 0.85, 2.89, 2.1, 1.7, 2.49, 2.71, 2.6, 1.64, 0.73, 0.52, 2.18, 1.0, 1.5, 1.21, 2.46, 1.39, 0.0, 2.92, 1.86, 0.68, 1.1, 1.74, 0.69, 2.99, 3.0, 2.62, 2.78, 1.75, 1.34, 2.01, 0.65, 1.76, 0.6, 1.32],
    [1.21, 1.02, 1.0, 2.27, 1.17, 1.22, 0.89, 1.51, 2.79, 1.37, 1.54, 1.68, 1.26, 2.3, 1.69, 1.2, 1.53, 2.32, 1.45, 2.09, 0.51, 1.38, 1.84, 0.66, 0.66, 2.97, 1.34, 1.5, 2.65, 1.3, 2.04, 0.62, 2.92, 0.0, 2.15, 0.52, 1.74, 1.18, 1.78, 2.61, 1.74, 1.24, 2.48, 2.99, 0.78, 0.53, 1.12, 1.19, 2.11, 1.75],
    [0.56, 2.06, 1.57, 1.43, 2.85, 2.42, 2.3, 2.62, 2.23, 1.13, 1.46, 0.76, 1.07, 1.03, 2.91, 2.76, 2.74, 2.63, 2.32, 2.57, 0.91, 2.61, 2.31, 2.26, 2.04, 2.02, 1.41, 2.69, 0.51, 0.53, 2.61, 2.81, 1.86, 2.15, 0.0, 0.55, 1.3, 1.99, 2.72, 2.22, 0.95, 0.97, 1.36, 0.65, 1.62, 0.82, 1.61, 2.19, 0.55, 2.13],
    [1.54, 2.97, 1.84, 2.21, 2.83, 1.63, 2.5, 2.91, 1.84, 1.19, 0.95, 2.9, 1.64, 1.84, 0.69, 2.48, 2.56, 2.97, 1.57, 1.37, 0.67, 2.35, 2.39, 1.46, 1.5, 2.34, 1.6, 2.72, 1.35, 0.95, 1.58, 2.44, 0.68, 0.52, 0.55, 0.0, 1.77, 2.55, 3.0, 2.6, 1.69, 0.87, 2.28, 1.11, 2.61, 2.95, 1.95, 1.6, 2.87, 1.75],
    [1.83, 1.25, 0.6, 0.66, 1.2, 2.84, 2.95, 2.92, 1.17, 2.2, 0.86, 0.79, 1.46, 1.66, 0.77, 1.06, 1.57, 2.56, 0.92, 0.52, 1.14, 1.52, 2.59, 2.66, 2.44, 2.12, 2.05, 2.46, 1.59, 0.94, 1.22, 1.28, 1.1, 1.74, 1.3, 1.77, 0.0, 2.93, 0.8, 2.9, 1.2, 2.0, 2.98, 1.66, 2.23, 2.14, 2.61, 0.62, 2.1, 1.77],
    [2.46, 1.56, 0.91, 1.29, 1.16, 0.77, 0.72, 1.64, 1.51, 1.06, 1.83, 0.8, 1.05, 0.58, 1.68, 2.08, 1.99, 2.75, 1.66, 0.73, 1.04, 1.83, 1.18, 0.88, 2.74, 2.14, 2.67, 1.09, 1.66, 1.68, 2.87, 1.64, 1.74, 1.18, 1.99, 2.55, 2.93, 0.0, 2.97, 2.55, 1.26, 2.5, 0.68, 2.87, 1.96, 2.77, 0.57, 2.75, 1.08, 2.26],
    [0.91, 2.77, 1.81, 2.82, 2.73, 2.16, 1.44, 0.92, 1.41, 1.41, 2.95, 1.07, 1.67, 1.52, 1.49, 0.65, 0.69, 2.65, 2.56, 1.71, 2.77, 2.51, 1.22, 1.86, 2.45, 2.2, 2.22, 0.75, 0.62, 2.42, 2.81, 1.78, 0.69, 1.78, 2.72, 3.0, 0.8, 2.97, 0.0, 1.77, 2.65, 1.34, 0.87, 1.26, 2.82, 1.1, 1.95, 1.31, 1.86, 2.18],
    [0.66, 2.99, 2.91, 1.28, 1.08, 0.75, 2.28, 2.43, 1.29, 0.53, 1.6, 0.97, 1.35, 2.47, 2.21, 2.88, 1.75, 1.57, 0.58, 2.36, 0.75, 2.9, 1.98, 0.96, 2.24, 2.27, 2.79, 1.88, 1.54, 2.91, 1.71, 1.84, 2.99, 2.61, 2.22, 2.6, 2.9, 2.55, 1.77, 0.0, 2.0, 1.72, 1.52, 2.95, 1.13, 0.94, 1.11, 0.89, 1.25, 2.5],
    [2.98, 2.73, 1.91, 0.78, 0.9, 1.69, 1.83, 2.78, 1.59, 1.79, 2.69, 1.09, 1.07, 2.75, 2.32, 2.03, 2.86, 1.72, 2.69, 1.27, 2.27, 2.68, 2.2, 1.45, 1.85, 2.23, 1.19, 2.77, 1.02, 0.65, 1.25, 2.14, 3.0, 1.74, 0.95, 1.69, 1.2, 1.26, 2.65, 2.0, 0.0, 1.99, 0.93, 2.72, 2.97, 2.39, 1.23, 1.6, 0.69, 0.66],
    [1.01, 2.45, 2.33, 0.79, 1.96, 2.08, 2.04, 0.72, 0.88, 1.16, 2.06, 2.37, 2.46, 0.98, 2.59, 1.69, 2.37, 0.85, 0.53, 1.41, 1.82, 1.9, 0.53, 2.38, 0.57, 0.95, 0.72, 0.93, 1.66, 0.64, 2.99, 0.57, 2.62, 1.24, 0.97, 0.87, 2.0, 2.5, 1.34, 1.72, 1.99, 0.0, 1.29, 2.19, 2.36, 0.68, 1.19, 2.3, 2.95, 2.19],
    [2.69, 2.03, 1.39, 0.83, 2.41, 2.82, 2.95, 2.1, 2.42, 2.91, 1.57, 1.1, 0.63, 0.81, 2.33, 2.03, 0.55, 1.65, 1.73, 1.74, 2.02, 2.21, 2.9, 3.0, 2.16, 1.61, 2.96, 2.34, 2.65, 1.35, 2.78, 2.67, 2.78, 2.48, 1.36, 2.28, 2.98, 0.68, 0.87, 1.52, 0.93, 1.29, 0.0, 1.2, 0.51, 2.47, 1.3, 0.75, 2.7, 1.59],
    [1.28, 0.55, 2.55, 1.98, 0.87, 1.32, 2.92, 2.11, 0.8, 2.45, 0.9, 1.42, 1.16, 0.99, 1.49, 2.76, 0.75, 1.82, 1.51, 2.78, 1.67, 1.36, 2.06, 2.43, 2.32, 2.66, 2.22, 2.08, 1.85, 1.39, 1.02, 2.8, 1.75, 2.99, 0.65, 1.11, 1.66, 2.87, 1.26, 2.95, 2.72, 2.19, 1.2, 0.0, 1.53, 0.59, 1.84, 2.16, 0.96, 2.16],
    [2.37, 1.94, 0.57, 2.52, 0.78, 1.99, 1.51, 2.38, 1.62, 2.55, 1.06, 1.33, 1.8, 0.67, 0.72, 2.2, 2.51, 1.99, 1.28, 2.88, 2.39, 0.82, 2.61, 2.26, 0.76, 2.21, 2.66, 2.61, 1.88, 2.23, 1.06, 2.98, 1.34, 0.78, 1.62, 2.61, 2.23, 1.96, 2.82, 1.13, 2.97, 2.36, 0.51, 1.53, 0.0, 1.9, 0.78, 2.84, 2.42, 2.39],
    [0.91, 1.03, 2.22, 2.44, 1.44, 2.23, 2.0, 2.87, 1.99, 0.83, 2.81, 2.15, 2.97, 2.42, 1.02, 2.63, 1.69, 0.75, 2.24, 1.97, 0.71, 2.11, 2.85, 0.67, 1.09, 1.61, 1.02, 1.0, 2.33, 0.75, 2.69, 1.46, 2.01, 0.53, 0.82, 2.95, 2.14, 2.77, 1.1, 0.94, 2.39, 0.68, 2.47, 0.59, 1.9, 0.0, 1.86, 0.67, 1.29, 1.41],
    [1.49, 0.59, 0.95, 2.92, 0.94, 2.51, 0.92, 1.58, 2.33, 2.47, 2.82, 1.75, 2.34, 1.86, 2.3, 1.18, 1.99, 1.08, 2.1, 0.91, 2.76, 2.38, 2.94, 2.82, 0.51, 0.79, 2.27, 1.51, 1.38, 2.41, 2.62, 2.6, 0.65, 1.12, 1.61, 1.95, 2.61, 0.57, 1.95, 1.11, 1.23, 1.19, 1.3, 1.84, 0.78, 1.86, 0.0, 1.83, 1.2, 0.84],
    [1.25, 0.54, 2.96, 0.82, 1.43, 1.72, 2.25, 2.85, 1.3, 0.81, 2.73, 2.2, 0.59, 1.18, 0.56, 1.81, 2.74, 2.03, 1.35, 1.18, 2.28, 2.22, 2.84, 1.27, 1.9, 2.0, 2.72, 2.75, 2.52, 1.39, 1.48, 0.61, 1.76, 1.19, 2.19, 1.6, 0.62, 2.75, 1.31, 0.89, 1.6, 2.3, 0.75, 2.16, 2.84, 0.67, 1.83, 0.0, 1.43, 2.21],
    [0.55, 1.91, 2.28, 2.89, 2.31, 1.83, 0.95, 0.7, 1.83, 2.14, 1.85, 1.28, 1.07, 2.49, 2.34, 1.28, 2.7, 1.9, 2.67, 2.94, 2.57, 2.69, 1.02, 0.83, 1.68, 1.04, 0.73, 2.41, 1.96, 2.39, 0.91, 1.48, 0.6, 2.11, 0.55, 2.87, 2.1, 1.08, 1.86, 1.25, 0.69, 2.95, 2.7, 0.96, 2.42, 1.29, 1.2, 1.43, 0.0, 1.6],
    [2.19, 0.86, 1.17, 0.87, 2.09, 1.81, 1.22, 0.88, 1.24, 2.42, 2.93, 2.76, 0.79, 1.63, 2.14, 2.32, 2.01, 1.35, 2.66, 1.88, 1.15, 0.82, 2.34, 1.98, 0.77, 2.98, 0.65, 0.76, 2.92, 2.38, 2.41, 2.52, 1.32, 1.75, 2.13, 1.75, 1.77, 2.26, 2.18, 2.5, 0.66, 2.19, 1.59, 2.16, 2.39, 1.41, 0.84, 2.21, 1.6, 0.0],
]

def build_flight_time_matrix():

    count_clinics = Clinic.query.count() # las polis siempre tienen ids continuos ;)
    routes = RigiRoute.query.all()
    matrix = [
        [
            0.0 if i == j else float('inf') 
            for j in range(count_clinics)
        ] 
        for i in range(count_clinics)
    ]

    # Rellenar la matriz con los flight_time_minutes
    for route in routes:
        origin_idx = int(route.clinic_origin)
        dest_idx = int(route.clinic_destination)    

        try:
            value = float(time_to_number(route.flight_time_minutes))
        except (ValueError, TypeError):
            print("error crack")
            value = float('inf')

        matrix[dest_idx][origin_idx] = value

    return matrix


zero = 0
max_vehicles = 1
vehicle_capacity = 3000
infinity = float('inf')

depot_time = (0, 20)

pedido = 'pedido'
envio = 'envio'

def make_daily_routing(urgent_deliveries, normal_deliveries, low_deliveries, custom_depot, distance_matrix):
    depot = Node(0, 0, (0, 20), 0, 'Depot', None, None) # si anda dejalo

    #distance_matrix = build_flight_time_matrix()
    varp = VRPTW_MultipleDeliveries(depot, distance_matrix, vehicle_capacity, max_vehicles)
    routes: List[List[Node]] = []
    routes_start_services: List[List[Node]] = []
    impossible_nodes = []
    i = 1
    route = [custom_depot]
    while len(urgent_deliveries) != 0 or len(normal_deliveries) != 0 or len(low_deliveries) != 0:

        route, urgent_deliveries, impossible_nodes_u, start_service = varp.solve(urgent_deliveries, predefined_route=route)
        route, normal_deliveries, impossible_nodes_n, start_service = varp.solve(unrouted_deliveries=normal_deliveries,  predefined_route=route)
        route, low_deliveries, impossible_nodes_l, start_service = varp.solve(unrouted_deliveries=low_deliveries, predefined_route=route)

        route_length = len(route)

        impossible_nodes.extend(impossible_nodes_u)
        impossible_nodes.extend(impossible_nodes_n)
        impossible_nodes.extend(impossible_nodes_l)

        if route_length == 1:
            break # no pude rutear nada mas

        if route_length > 1: # mariana: mayor claridad
            final_depot: Node = copy.deepcopy(route[len(route) - 1])

            final_depot.time_window= (final_depot.get_start_time_window() + time_to_number('00:30'), final_depot.get_end_time_window()) # cooldown todo: cambiarlo a una config
            routes.append(route)
            routes_start_services.append(start_service)
                
            route = [final_depot]


    return routes, routes_start_services, impossible_nodes 

def make_multiple_day_routing(urgent_deliveries, normal_deliveries, low_deliveries, custom_depot, distance_matrix):
    depot = Node(0, 0, (0, 20), 0, 'Depot', None, None)

    #distance_matrix = build_flight_time_matrix()

    varp = VRPTW_MultipleDeliveries(depot, distance_matrix, vehicle_capacity, max_vehicles)
    routes: List[List[Node]] = []
    routes_start_services: List[List[Node]] = []
    routes_by_day = {}
    routes_start_services_by_day = {}
    impossible_nodes = []
    i = 1
    route = [custom_depot]
    while len(urgent_deliveries) != 0 or len(normal_deliveries) != 0 or len(low_deliveries) != 0:

        route, urgent_deliveries, impossible_nodes_u, start_service = varp.solve(urgent_deliveries, predefined_route=route)
        route, normal_deliveries, impossible_nodes_n, start_service = varp.solve(unrouted_deliveries=normal_deliveries,  predefined_route=route)
        route, low_deliveries, impossible_nodes_l, start_service = varp.solve(unrouted_deliveries=low_deliveries, predefined_route=route)

        route_length = len(route)

        impossible_nodes.extend(impossible_nodes_u)
        impossible_nodes.append(impossible_nodes_n)
        impossible_nodes.append(impossible_nodes_l)

        if route_length > 1: # mariana: mayor claridad
            final_depot = copy.deepcopy(route[len(route) - 1])
            routes.append(route)
            routes_start_services.append(start_service)
                
            route = [final_depot]
            #start_service = [0] se inicializa adentro



        if (len(routes) > 0 and route_length == 1) or (len(urgent_deliveries) == 0 and len(normal_deliveries) == 0 and len(low_deliveries) == 0):
            routes_copy = []
            routes_start_services_copy = []
            
            for j in range(len(routes)):
                route_copy = routes[j].copy()
                start_service_copy = routes_start_services[j].copy()

                routes_copy.append(route_copy)
                routes_start_services_copy.append(start_service_copy)

            routes_by_day[i] = routes_copy # se puede retornar
            routes_start_services_by_day[i] = routes_start_services_copy #
            
            i += 1
            print(i)
            routes = []
            route = []
            routes_start_services = []

    return routes_by_day, routes_start_services_by_day, impossible_nodes
